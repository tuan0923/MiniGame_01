//=============================================================================
//
// スコア処理[score.cpp]
// Author : SHUGO KURODA
//
//=============================================================================

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "object2D.h"
#include "life.h"
#include "number.h"

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9 CLife::m_pTexture = nullptr;

//=============================================================================
// コンストラクタ
//=============================================================================
CLife::CLife() :m_nLife(0), m_pVtxBuff(nullptr), m_apNumber{ nullptr }
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CLife::~CLife()
{
}

//=============================================================================
// 生成
//=============================================================================
CLife *CLife::Create(const D3DXVECTOR3& pos, const D3DXVECTOR2& size)
{
	CLife *pLife = new CLife;

	for (int nCntScore = 0; nCntScore < MAX_LIFE; nCntScore++)
	{
		// 数字ポリゴン生成
		pLife->m_apNumber[nCntScore] = new CNumber("TEX_TYPE_SCORE_UI");

		if (pLife->m_apNumber[nCntScore] != nullptr)
		{
			// 位置設定
			pLife->m_apNumber[nCntScore]->SetPosition(D3DXVECTOR3(pos.x + (nCntScore * 20.0f), pos.y, pos.z));
			// サイズ設定
			pLife->m_apNumber[nCntScore]->SetSize(size);
			// 初期化
			pLife->m_apNumber[nCntScore]->Init();
		}
	}

	return pLife;
}

//=============================================================================
// ポリゴンの初期化
//=============================================================================
HRESULT CLife::Init()
{
	//オブジェクトの種類設定
	SetType(EObject::OBJ_PAUSE);

	return S_OK;
}

//=============================================================================
// 終了
//=============================================================================
void CLife::Uninit()
{
	for (int nCntNumber = 0; nCntNumber < MAX_LIFE; nCntNumber++)
	{
		// 中身があるなら
		if (m_apNumber[nCntNumber] != nullptr)
		{
			// 数字情報の終了処理
			m_apNumber[nCntNumber]->Uninit();
			m_apNumber[nCntNumber] = nullptr;
		}
	}

	// オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新
//=============================================================================
void CLife::Update()
{
}

//=============================================================================
// 描画
//=============================================================================
void CLife::Draw()
{
}

//=============================================================================
// スコアの加算
//=============================================================================
void CLife::Add(const int& nScore)
{
	m_nLife += nScore;
	Set();
}

//=============================================================================
// スコアの設定
//=============================================================================
void CLife::Set()
{
	//各桁の数値を格納(pPostexU[桁ごとの数値])
	int aPosTexU[MAX_LIFE];

	aPosTexU[0] = m_nLife % 10;

	//テクスチャを更新する
	for (int nCntScore = 0; nCntScore < MAX_LIFE; nCntScore++)
	{
		if (m_apNumber[nCntScore] != nullptr)
		{
			m_apNumber[nCntScore]->SetAnimation(aPosTexU[nCntScore], 0, CNumber::DIVISION_U, CNumber::DIVISION_V);
		}
	}
}